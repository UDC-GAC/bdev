#
# Copyright (C) 2012 Auburn University
# Copyright (C) 2012 Mellanox Technologies
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#  
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
# either express or implied. See the License for the specific language 
# governing permissions and  limitations under the License.
#
# 

#
# Mellanox UDA, a software plugin, accelerates Hadoop network and improves
# the scaling of Hadoop clusters executing data analytics intensive applications.
# A novel data moving protocol which uses RDMA in combination with an efficient 
# merge-sort algorithm enables Hadoop clusters based on Mellanox InfiniBand and 
# 10GbE and 40GbE RoCE (RDMA over Converged Ethernet) adapter cards to efficiently 
# move data between servers accelerating the Hadoop framework.
# Mellanox UDA is collaboratively developed with Auburn University.  
#

#in order to run UDA, you'll need:
#1. add line containing jar name matching your hadoop version to the end of your hadoop-env.sh.
  For Hadoop 1.x.y add:
  export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:/usr/lib64/uda/uda-hadoop-1.x.jar
  For Hadoop-2.2.x add:
  export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:/usr/lib64/uda/uda-hadoop-2.x.jar
  For Hadoop-3.0 (community svn trunk) add:
  export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:/usr/lib64/uda/uda-hadoop-3.x.jar

    
#2. hadoop-1.x.y TaskTracker level settings (In case you have YARN, you can skip this step):
#   Merge the following lines into your mapred-site.xml
#   NOTE: this must be in mapred-site.xml, because it must be considered in TaskTracker initialization
#         hence, it can't be just given per job
  <?xml version="1.0"?>
  <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
  <configuration>

    <property>
      <name>mapreduce.shuffle.provider.plugin.classes</name>
      <value>com.mellanox.hadoop.mapred.UdaShuffleProviderPlugin,org.apache.hadoop.mapred.TaskTracker$DefaultShuffleProvider</value>              
      <description>A comma-separated list of classes that should be loaded as ShuffleProviderPlugin(s).
       A ShuffleProviderPlugin can serve shuffle requests from reducetasks.
       Each class in the list must be an instance of org.apache.hadoop.mapred.ShuffleProviderPlugin.
      </description>
    </property>

  </configuration>

#3. YARN settings (In case you DON'T have YARN, you can skip this step):
#### merge the following to your yarn-site.xml

      <!-- IMPORTANT: it is possible that you already have entry with this name.  In such a case you'll need to merge its values -->
      <property>
          <name>yarn.nodemanager.aux-services</name>
          <value>mapreduce_shuffle,uda_shuffle</value>
      </property>

      <property>
            <name>yarn.nodemanager.aux-services.uda_shuffle.class</name>
            <value>com.mellanox.hadoop.mapred.UdaShuffleHandler</value>
      </property>

#### add the following to your mapred-site.xml
    <property>
      <name>mapreduce.job.shuffle.provider.services</name>
      <value>uda_shuffle</value>
      <description>A comma-separated list of classes that should be loaded as additional ShuffleProviderPlugin(s).
        A ShuffleProviderPlugin can serve shuffle requests from reducetasks.
      </description>
    </property>

#### Perform the following command on each of your slaves:
  ln -s  /usr/lib64/uda/uda-hadoop-2.x.jar <YOUR-HADOOP-HOME>/share/hadoop/common/lib/
  (NOTE: just specifying the jar thru -libjar is not enough for YARN’s auxiliary services)


#4. Job level settings:
#   The following are ADDITIONAL setting that must be given to any UDA job (relevant for both yarn and MRv1 cases).
#   it can be provided either in command line or in mapred-site.xml
  <?xml version="1.0"?>
  <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
  <configuration>

    <property>
      <name>mapreduce.job.reduce.shuffle.consumer.plugin.class</name>
      <value>com.mellanox.hadoop.mapred.UdaShuffleConsumerPlugin</value>
      <description>
        Represents plugin for shuffle at ReduceTask side 
      </description>
    </property>

  </configuration>


5. OPTIONAL: in case your IB interface is not the default one on your machine * - NOTE this works only for hadoop-1.x.y*:
# HDFS settings:
#Merge the following lines into your hdfs-site.xml
<?xml version="1.0"?>
  <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
  <configuration>
    <property>
      <name>dfs.datanode.dns.interface</name>
      <value>ib0</value>
      <description>The name of the Network Interface from which a
        data node should report its IP address.
      </description>
      </property>
  </configuration>

# MapRed settings:
#Merge the following lines into your mapred-site.xml
  <?xml version="1.0"?>
  <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
  <configuration>
    <property>
      <name>mapred.tasktracker.dns.interface</name>
      <value>ib0</value>
    </property>
  </configuration>



#6 . OPTIONAL: 
#   The following are optional parameters for UDA with their defaults
#   Users may decide to change defaults in their environment
  <?xml version="1.0"?>
  <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
  <configuration>
        
    <property>
      <name>mapred.rdma.cma.port</name>
      <description>Port number to be used for the RDMA connection</description>
      <value>9011</value>
    </property>
    
    <property>
      <name>mapred.rdma.wqe.per.conn</name>
      <description>Number of allocated Work Queue Elements (WQEs) for Receive
          Queue per connection
      </description>
      <value>256</value>
    </property>
    
    <property>
      <name>mapred.rdma.buf.size</name>
      <value>1024</value>
      <description>
        Used by both UdaShuffleProvider and UdaShuffleConsumer:
        - UdaShuffleProvider (TaskTracker): determines the RDMA and AIO Buffers size to satify Map Output's RDMA fetch requests
        - UdaShuffleConsumer (Reducer): user prefered RDMA buffer size for fetching map outputs
        Size in KB and must be alligned to page size.
      </description>
    </property>
    
    <property>
      <name>mapred.rdma.buf.size.min</name>
      <value>32</value>
      <description>
        UDA reducer allocates RDMA buffers according to 'mapred.rdma.buf.size'
        If the buffer size is too big then a smaller buffer will be used while 'mapred.rdma.buf.size.min' is the limit.
        Bigger RDMA buffers improves the shuffle performance. 
        Too small buffer size can significantly reduce the perfomance.
        Task will fail in case the reducer need to use smaller buffer size than 'mapred.rdma.buf.size.min'.
      </description>
    </property>

    <property>
      <name>mapred.rdma.shuffle.total.size</name>
      <value>2g</value>
      <description>
        The total amount of memory per reducer allocated for UDA's RDMA shuffle phase and levitated merge algorithm.
        The value is a long number or human readable format. You can used the following suffix (case insensitive):
          k(kilo), m(mega), g(giga)
        For example: use '2g' for 2GB , or '2048m' as well, also possible using '2097152k' or just '2147483648'
        If value is not set for this parameter or value is set to 0, then the total amount of memory for RDMA will be calculated using combination of:
          1. -Xmx on JAVA_OPTS for reducer. ( mapred.reduce.child.java.opts)
          2. mapred.job.shuffle.input.buffer.percent
          * total amount of RDMA memory per reducer will be (1)*(2)
      </description>
    </property>  
    
    <property>
      <name>mapred.rdma.compression.buffer.ratio</name>
      <description>The ratio in which memory is divided between RDMA buffer and decompression buffer (used only with intermediate data compression)</description>
      <value>0.20</value>
    </property>
  
  </configuration>

7. OPTIONAL - debug logs:
UDA debug logs configuration and output are available thru Hadoop standard log configuration and log files.
For example to debug the client side (NetMerger) at TRACE level and the server side (MofSupplier) at DEBUG level, add the following 2 lines to your log4j.properties file:

  log4j.logger.org.apache.hadoop.mapred.ShuffleConsumerPlugin=TRACE
  log4j.logger.org.apache.hadoop.mapred.ShuffleProviderPlugin=DEBUG

The log output from UDA client will be in the log file of the appropriate Reduce Task.
The log output from UDA server will be in the log file of the appropriate Task Tracker.

8. Verifying that UDA is being used:
   In case UDA was loaded in a reducer and it successfully used the UDA provider you will see a log line like this towards the end of the reducer log file:
        ====XXX Successfully closed UdaShuffleConsumerPlugin XXX====
   Such a line should be in each reducer log file of the job.
   NOTE: this line comes at INFO log level (the default level).  No need to turn on DEBUG level for it.
   Alternatively, you can run the job with "mapred.rdma.developer.mode" set to "true", to prevent UDA from falling back to built-in
   shuffle process in case of failure. Note that this parameter should not be used in production environment.
